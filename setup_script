#!/bin/bash

# Check if the script is being run with sudo privileges (root)
if [[ ! $EUID == 0 ]]; then
    echo "ERROR: You must run this script with sudo privileges."
    exit 1
fi

# Install nginx and ufw (firewall) along with any necessary dependencies
pacman -S --noconfirm nginx ufw

# ----------------- Task 1: Set Up the Webgen User -----------------

# Create a system user called "webgen" without login access (no shell access)
# This is for security, so the user can only run specific tasks and cannot log in.
sudo useradd --system -d /var/lib/webgen -s /usr/bin/nologin -m webgen

# Create directories for the webgen user to store the script and HTML files
mkdir /var/lib/webgen/bin
mkdir /var/lib/webgen/HTML

# Change ownership of the directories so only the webgen user can access them
chown -R webgen:webgen /var/lib/webgen

# Copy the generate_index script to the bin directory
cp ./generate_index /var/lib/webgen/bin

# Make sure the webgen user owns the generate_index script
chown webgen:webgen /var/lib/webgen/bin/generate_index

# ----------------- Task 2: Set Up Systemd Service and Timer -----------------

# Copy the systemd unit files to the system directory
cp ./generate-index.service /etc/systemd/system/
cp ./generate-index.timer /etc/systemd/system/

# Reload systemd to pick up the new unit files
systemctl daemon-reload

# Start the generate-index service immediately to create the first index.html
# You can check if it started correctly using: systemctl status generate-index.service
systemctl start generate-index.service

# Enable the timer so it runs automatically after reboot and starts running on time
# You can check the status of the timer using: systemctl status generate-index.timer
systemctl enable --now generate-index.timer

# ----------------- Task 3: Set Up Nginx -----------------

# Backup the original nginx.conf in case something goes wrong
mv /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak

# Copy the new nginx.conf file to replace the old one
cp ./nginx.conf /etc/nginx

# Test the new Nginx configuration for any errors
# Run: sudo nginx -t to check if everything is set up correctly
sudo nginx -t

# Create directories for separate server blocks (one for each website or service)
mkdir /etc/nginx/sites-available
mkdir /etc/nginx/sites-enabled

# Copy your server block configuration to sites-available
cp ./assignment3-serverblock.conf /etc/nginx/sites-available

# Create a symbolic link from sites-available to sites-enabled to "enable" it
ln -s /etc/nginx/sites-available/assignment3-serverblock.conf /etc/nginx/sites-enabled/

# Start and enable nginx to make sure it runs on boot
systemctl enable --now nginx

# ----------------- Task 4: Set Up the Firewall -----------------

# Enable the ufw (firewall) service to start on boot
systemctl enable --now ufw.service

# Allow SSH so you can connect to the server remotely
sudo ufw allow ssh

# Limit SSH connections to prevent brute force attacks
# If someone tries to connect more than 6 times within 30 seconds, they'll be blocked
sudo ufw limit ssh

# Allow HTTP traffic so nginx can serve web pages
sudo ufw allow http

# Enable ufw (firewall) to start protecting your server
# --force skips the confirmation prompt
sudo ufw --force enable

# To check if ufw is active, you can use: sudo ufw status verbose
